#!/bin/sh
#
# check that the configure options are correct for chrooted operation:

if [ x@CHROOTED_NAME@ = x ] || [ ! -f ./config.h ]; then
	echo 
	echo 'your scponly build is not configured for chrooted operation.'
	echo 'please reconfigure as follows, then rebuild and reinstall:'
	echo
	echo './configure --enable-chrooted-binary (... other options)'
	echo
	exit 1
fi

# the following is a list of binaries that will be staged in the target dir
BINARIES=`@PROG_GREP@ '#define PROG_' config.h | @PROG_CUT@ -f2 -d\" | @PROG_GREP@ -v ^cd$`

# a function to display a failure message and then exit 
fail ( ) {
	echo -e $@
	exit 1
}

# "get with default" function
# this function prompts the user with a query and default reply
# it returns the user reply
getwd ( ) {
	query="$1"
	default="$2"
	echo -en "$query [$default]" | cat >&2
	read response
	if [ x$response = "x" ]; then
		response=$default
	fi
	echo $response
}

# "get yes no" function
# this function prompts the user with a query and will continue to do so
# until they reply with either "y" or "n"
getyn ( ) {
	query="$@"
	echo -en $query | cat >&2
	read response
	while [ x$response != "xy" -a x$response != "xn" ]; do
		echo -e "\n'y' or 'n' only please...\n" | cat >&2
		echo -en $query | cat >&2
		read response
	done	
	echo $response
}

if [ x@PROG_LDD@ = x ]; then
	echo "this script requires the program ldd to determine which"
	fail "shared libraries to copy into your chrooted dir..."
fi
USE_PW=0;
if [ x@PROG_USERADD@ = x ]; then
	USE_PW=1;
else 
    if [ x@PROG_PW@ = x ]; then
	echo "this script requires the program useradd or pw to add your"
	fail "chrooted scponly user."
    fi
fi

# we need to be root
if [ `id -u` != "0" ]; then
	fail "you must be root to run this script\n"
fi

echo
echo Next we need to set the home directory for this scponly user.
echo please note that the user\'s home directory MUST NOT be writable
echo by the scponly user.  this is important so that the scponly user
echo cannot subvert the .ssh configuration parameters.
echo
echo for this reason, an \"incoming\" subdirectory will be created that
echo the scponly user can write into.  if you want the scponly user to 
echo automatically change to this incoming subdirectory upon login, you
echo can specify this when you specify the user\'s home directory as 
echo follows:
echo
echo set the home dir to /chroot_path//incoming
echo
echo when scponly chroots, it will only chroot to "chroot_path" and
echo afterwards, it will chdir to incoming.

echo -n "enter the home directory you wish to set for this user: "
read targetdir
if [ "x$targetdir" = "x" ]; then
	fail "need to specify a target directory"
fi

echo -n "Install for what username? "
read targetuser
if [ "x$targetuser" = "x" ]; then
	fail "need to specify a username"
fi

@INSTALL@ -d $targetdir
@INSTALL@ -d $targetdir/usr
@INSTALL@ -d $targetdir/usr/bin
@INSTALL@ -d $targetdir/usr/sbin
@INSTALL@ -d $targetdir/usr/local
@INSTALL@ -d $targetdir/usr/local/lib
@INSTALL@ -d $targetdir/usr/local/bin
@INSTALL@ -d $targetdir/lib
@INSTALL@ -d $targetdir/usr/lib
@INSTALL@ -d $targetdir/usr/libexec
@INSTALL@ -d $targetdir/usr/libexec/openssh
@INSTALL@ -d $targetdir/bin
@INSTALL@ -d $targetdir/etc

for bin in $BINARIES; do
	@INSTALL@ -C $bin $targetdir$bin
done

LIB_LIST=`@PROG_LDD@ $BINARIES 2> /dev/null | @PROG_CUT@ -f2 -d\> | @PROG_CUT@ -f1 -d\( | @PROG_GREP@ "^ " | @PROG_SORT@ -u`
if [ -f /usr/libexec/ld.so ]; then
	LIB_LIST="$LIB_LIST /usr/libexec/ld.so"
else 
	if [ -f /lib/ld-linux.so.2 ]; then 
		LIB_LIST="$LIB_LIST /lib/ld-linux.so.2"
	else 
		if [ -f /usr/libexec/ld-elf.so.1 ]; then
			LIB_LIST="$LIB_LIST /usr/libexec/ld-elf.so.1"
		else
			fail i cant find your equivalent of ld.so
		fi
	fi
fi

/bin/ls /lib/libnss_compat* 2>&1 > /dev/null
if [ $? -eq 0 ]; then
	LIB_LIST="$LIB_LIST /lib/libnss_compat* /lib/ld.so"
fi

if [ "x$LIB_LIST" != "x" ]; then
	for lib in $LIB_LIST; do
		@INSTALL@ $lib $targetdir/$lib
	done
fi
if [ $USE_PW -eq 0 ] ; then
    @PROG_USERADD@ -d "$targetdir" -s "@prefix@/sbin/@CHROOTED_NAME@" $targetuser
    if [ $? -ne 0 ]; then
         fail "if this user exists, remove it and try again"
    fi
else
    @PROG_PW@ useradd -n $targetuser -s "@prefix@/sbin/@CHROOTED_NAME@" -d "$targetdir"
    if [ $? -ne 0 ]; then
         fail "if this user exists, remove it and try again"
    fi
fi 

chown 0:0 $targetdir 
if [ -d $targetdir/.ssh ]; then
	chown 0.0 $targetdir/.ssh
fi

if [ ! -d $targetdir/incoming ]; then
	echo -e "\ncreating  $targetdir/incoming directory for uploading files"
	@INSTALL@ -o $targetuser -d $targetdir/incoming
fi

# the following is VERY BSD centric
# i check for pwd_mkdb before trying to use it
if [ x@PROG_PWD_MKDB@ = x ]; then
	@PROG_GREP@ $targetuser /etc/passwd > $targetdir/etc/passwd
else
	@PROG_GREP@ $targetuser /etc/master.passwd > $targetdir/etc/master.passwd
	@PROG_PWD_MKDB@ -d "$targetdir/etc" $targetdir/etc/master.passwd
	/bin/rm -rf $targetdir/etc/master.passwd $targetdir/etc/spwd.db
fi


